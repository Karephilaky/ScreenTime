# üñ•Ô∏è Seguimiento de Aplicaciones Activas

Este proyecto permite realizar un seguimiento del tiempo que un usuario pasa en diferentes aplicaciones activas en su sistema. Utiliza una interfaz gr√°fica en **Tkinter** y obtiene la ventana activa mediante la biblioteca **pywin32**. El tiempo registrado se muestra en tiempo real en la interfaz, y los resultados pueden ser exportados a un archivo CSV para su an√°lisis.

---

## üåü Caracter√≠sticas

- **Seguimiento en tiempo real**: Monitorea las aplicaciones activas y calcula el tiempo que el usuario pasa en cada una.
- **Interfaz gr√°fica sencilla**: Interfaz creada con **Tkinter**, accesible y f√°cil de usar.
- **Exportaci√≥n a CSV**: Los datos del seguimiento pueden ser exportados a un archivo CSV para su posterior an√°lisis.
- **Multihilo**: Utiliza **hilos** para realizar el seguimiento sin bloquear la interfaz gr√°fica.

---

## üìã Requisitos

### üîπ Python 3.x

Este proyecto es compatible con Python 3. Aseg√∫rate de tenerlo instalado en tu sistema.

### üîπ Bibliotecas requeridas

- `tkinter` (viene preinstalado con Python, no es necesario instalarlo por separado).
- `pywin32` para interactuar con las ventanas activas en Windows.
- `time`, `csv`, `threading` (bibliotecas est√°ndar de Python).

Instala las bibliotecas necesarias ejecutando:

```bash
pip install pywin32
---

## ‚öôÔ∏è Funcionalidades

- **Iniciar seguimiento**: Inicia el monitoreo de las aplicaciones activas, registrando el tiempo que pasas en cada una.
- **Detener seguimiento**: Detiene el monitoreo y desactiva el bot√≥n de "Detener seguimiento".
- **Ver resultados en tiempo real**: Muestra en la interfaz el tiempo transcurrido en cada aplicaci√≥n activa mientras se realiza el seguimiento.
- **Exportar a CSV**: Los datos del seguimiento se exportan a un archivo CSV con la siguiente estructura:

| Aplicaci√≥n            | Tiempo (segundos) |
|-----------------------|-------------------|
| Nombre de la aplicaci√≥n | Tiempo transcurrido |

---

## üìù Instrucciones de Uso

### 1Ô∏è‚É£ Ejecutar el Script

Para ejecutar el proyecto, corre el script `seguimiento_aplicaciones.py`:

```bash
python seguimiento_aplicaciones.py

Esto abrir√° la interfaz gr√°fica donde podr√°s:

Iniciar el seguimiento: Haz clic en el bot√≥n "Iniciar seguimiento".
Detener el seguimiento: Haz clic en "Detener seguimiento" para finalizar el registro.
Exportar los resultados: Haz clic en "Exportar a CSV" para guardar los datos recopilados.
2Ô∏è‚É£ Cerrar la Aplicaci√≥n
Cuando desees salir, puedes hacerlo de forma segura haciendo clic en el bot√≥n de cerrar en la esquina superior derecha de la ventana. Se te pedir√° confirmaci√≥n para asegurarte de que deseas cerrar la aplicaci√≥n sin perder los datos.

markdown
Copiar c√≥digo

---

## üìö Explicaci√≥n del C√≥digo

1. **`get_active_window()`**  
   Obtiene el nombre de la ventana activa utilizando la funci√≥n `GetForegroundWindow()` de pywin32. Esto permite monitorear las aplicaciones que est√°n siendo utilizadas en el sistema en tiempo real.

2. **`track_app_usage()`**  
   Se encarga de realizar el seguimiento del tiempo transcurrido en cada aplicaci√≥n activa. Cada iteraci√≥n calcula el tiempo que ha pasado desde el √∫ltimo registro y actualiza la interfaz.

3. **`iniciar_seguimiento()`**  
   Inicia el seguimiento en un hilo separado, permitiendo que la interfaz gr√°fica siga siendo interactiva mientras se realiza el monitoreo.

4. **`detener_seguimiento()`**  
   Detiene el seguimiento de las aplicaciones y restablece los botones de la interfaz para permitir reiniciar el seguimiento.

5. **`exportar_datos()`**  
   Exporta los resultados a un archivo CSV que incluye el nombre de la aplicaci√≥n y el tiempo total que el usuario ha pasado en ella.

---

## üñºÔ∏è Capturas de Pantalla

- **Interfaz Principal**: Muestra el seguimiento en tiempo real y los botones para iniciar/detener el monitoreo.
- **Ventana de Exportaci√≥n**: Di√°logo de guardado de archivo CSV.

---

## ü§ù Contribuciones

Si deseas contribuir a este proyecto, sigue estos pasos:

1. Haz un fork de este repositorio.
2. Crea una rama nueva para tus cambios.
3. Realiza tus cambios y agrega pruebas si es necesario.
4. Realiza un pull request explicando qu√© cambios realizaste.

---
